const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const validator = require("validator");
const helmet = require("helmet");
const app = express();

// Middleware
app.use(helmet());
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect("mongodb://localhost/vulnerableDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log("MongoDB connected!");
}).catch(err => {
    console.log("MongoDB connection error:", err);
});

// User schema
const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    }
});
const User = mongoose.model("User", userSchema);

// Token middleware
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Expecting "Bearer TOKEN"
    if (!token) return res.status(401).send("Access denied. No token provided.");

    jwt.verify(token, 'your-secret-key', (err, user) => {
        if (err) return res.status(403).send("Invalid token.");
        req.user = user;
        next();
    });
}

// Routes
app.get("/", (req, res) => res.redirect("/login"));

// Signup
app.get("/signup", (req, res) => res.render("signup", { errorMessage: null }));


app.post("/signup", async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!validator.isAlphanumeric(username)) {
            return res.status(400).render("signup", {
                errorMessage: "Username must be alphanumeric."
            });
        }

        if (!validator.isStrongPassword(password, {
            minLength: 8,
            minLowercase: 1,
            minUppercase: 1,
            minNumbers: 1,
            minSymbols: 1
        })) {
            return res.status(400).render("signup", {
                errorMessage: "Password must be strong (min 8 chars, upper, lower, number, symbol)."
            });
        }

        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(409).render("signup", {
                errorMessage: "Username already taken."
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ username, password: hashedPassword });
        await newUser.save();

        res.redirect("/login");
    } catch (err) {
        console.error("Signup error:", err);
        res.status(500).render("signup", {
            errorMessage: "Server error during signup."
        });
    }
});


// Login
app.get("/login", (req, res) => res.render("login"));

app.post("/login", async (req, res) => {
    try {
        const { username, password } = req.body;

        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).send("Invalid credentials.");
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).send("Invalid credentials.");
        }

        const token = jwt.sign(
            { id: user._id, username: user.username },
            'your-secret-key',
            { expiresIn: '1h' }
        );

        res.send({ message: "Login successful", token });
    } catch (err) {
        console.error("Login error:", err);
        res.status(500).send("Server error during login.");
    }
});

// Protected profile route
app.get("/profile", authenticateToken, (req, res) => {
    res.render("profile", { username: req.user.username });
});

// Start server
app.listen(3000, () => console.log("App running at http://localhost:3000"));
